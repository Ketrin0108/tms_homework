
# Техническое задание:
# Есть магазин, продукт (товар), покупатель, корзина и список покупок - это все отдельные классы,
# атрибуты и методы которых нужно продумать самостоятельно для того чтобы реализовать логику ниже

# Часть 1. Спроектировать классы.
# Написать классы:

# Продукт - атрибуты: id, name, price, amount
# Магазин - список продуктов (объектов класса Product)
# Покупатель - id, количество денег, список продуктов (названия: молоко, сыр и тд),
# которые нужно купить - все задается при инициализации покупателя
# Корзина - id, список продуктов (объектов класса Product - по умолчанию None)

# Часть 2. Написать бизнес-логику
# Реализовать следующие возможности:

# Создается покупатель с определенным количеством денег и списком продуктов
# Покупатель приходит в магазин и берет корзину (покупателю при помощи метода создается и добавляется корзина)
# Создать экземпляр магазина, который должен быть синглтоном, в котором будет список продуктов
# Покупатель проходится по списку продуктов, которые ему нужно купить и смотрит,
# есть ли в магазине эти продукты, если продукт есть, то покупатель добавляет его
# в свою корзину (нужен метод для добавления продукта Product в корзину)
# ТОЛЬКО ПРИ УСЛОВИИ что у покупателя достаточно денег. В ином случае вывести сообщение.
# Если денег достаточно, то покупатель добавляет продукт в корзину и количество этого продукта
# в магазине уменьшается на 1
# После того как прошлись по всем продуктам, вывести сообщение о том,
# какие продукты были куплены, а какие не были

class Product:

    def __init__(self,namee,price,amount,list_of_product=None):
        self.name=name
        self.price=price
        self.amount=amount
        self.list_of_product=list_of_product

class Shop:
    products = ['молоко', 'сыр', 'хлеб', 'рыба','мясо','творог','банан','мука']
    def __new__(cls): # new управляет созданием нового экземпляра класса
        if not hasattr(cls, 'list_products'):
            cls.list_products = super(Shop, cls).__new__(cls)
        return cls.list_products


class Buyer:

    def __init__(self,id,money,list_products):
        self.id=id
        self.money=money
        self.list_products=list_products


    @property
    def basket(self):
        return self._basket

    @basket.setter
    def basket(self, basket):
        if list_products in Shop.products:
            self._basket.append(list_products)
        else:
            raise Exception("Недостаточно денег")


class Basket:
    def __init__(self,id,list_products):
        pass


class Shopping_list:
    pass

buyer=Buyer(id='Kira',money=50,list_products=('творог',',банан','мука'))
buyer.basket()